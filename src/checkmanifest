#!/usr/bin/env python
#
# (c) Copyright 2009 Cloudera, Inc.
#

__usage = """
  Usage: checkmanifest manifestFile checkDir [--release]

  Compares the contents of the named directory agaist the manifest file.
  determines if any files are missing, or if any extra files snuck in.
  exits with status 0 on match, status 1 if there are problems.
"""

import optparse
import os
import sys
import tempfile

# temporary files we will create and use
scannedDirFile = None
sortedManifestFile = None
diffOut = None

def cleanup():
  global scannedDirFile
  global sortedManifestFile
  global diffOut

  # clean up temp files we used
  if scannedDirFile != None:
    os.remove(scannedDirFile)
  if sortedManifestFile != None:
    os.remove(sortedManifestFile)
  if diffOut != None:
    os.remove(diffOut)


def main(argv):
  global __usage
  global scannedDirFile
  global sortedManifestFile
  global diffOut

  parser = optparse.OptionParser()
  parser.add_option("--release", action="store_true", dest="release_mode", \
      default=False)
  parser.add_option("--test", action="store_false", dest="release_mode")
  (options, args) = parser.parse_args()

  if len(args) != 2:
    print __usage
    return 1

  (manifestFile, checkDir) = args

  if not os.path.exists(manifestFile):
    print "Error: Cannot find manifest file: " + manifestFile
    return 1

  if not os.path.exists(checkDir):
    print "Error: Cannot find directory: " + checkDir
    return 1

  if not os.path.isdir(checkDir):
    print "Error: " + checkDir + " is not a directory"
    return 1

  # Read in the user-provided manifest file, sort it, and
  # deduplicate elements.
  (oshandle, sortedManifestFile) = tempfile.mkstemp()
  os.close(oshandle) # don't need this

  ret = os.system("cat \"" + manifestFile + "\" | sort | uniq > \"" \
      + sortedManifestFile + "\"")
  if ret > 0:
    print "Could not read and sort manifest file"
    return 1

  # Resolve test-specific package filenames in the user-provided list
  # into actual names that would exist in the directory.
  if options.release_mode:
    test_suffix = ""
  else:
    test_suffix = "-test"
  ret = os.system("sed -i -e 's/$TEST/" + test_suffix + "/' \"" + sortedManifestFile + "\"")
  if ret > 0:
    print "Could not modify sorted manifest file"
    return 1

  # Switch to the directory to check, and generate a sorted
  # manifest of what's actually present.
  try:
    os.chdir(checkDir)
  except OSError, ose:
    print "Could not switch to directory: " + checkDir
    print ose
    return 1

  (oshandle, scannedDirFile) = tempfile.mkstemp()
  os.close(oshandle) # don't need this

  ret = os.system("find . | sort | uniq > \"" + scannedDirFile + "\"")
  if ret > 0:
    print "Could not scan directory"

  # Run diff over the user-provided manifest vs. the actual one.
  (oshandle, diffOut) = tempfile.mkstemp()
  os.close(oshandle) # don't need this

  ret = os.system("diff -B -w --suppress-common-lines \"" + sortedManifestFile \
      + "\" \"" + scannedDirFile + "\" > \"" + diffOut + "\"")
  if ret > 0:
    # found difference
    finalRet = 1

    # determine what's different and print a summary
    try:
      handle = open(diffOut)
      lines = handle.readlines()
      handle.close()
    except IOError, ioe:
      print "Could not read back diff output"
      print ioe
      return 1

    missingFiles = []
    extraFiles = []
    for line in lines:
      if line.startswith("<"):
        missingFiles.append(line[2:].strip())
      elif line.startswith(">"):
        extraFiles.append(line[2:].strip())
    if len(missingFiles) > 0 or len(extraFiles) > 0:
      print "checkmanifest " + manifestFile + " encountered errors."
    if len(missingFiles) > 0:
      print "Missing manifested files:"
      for file in missingFiles:
        print "  " + file
    if len(extraFiles) > 0:
      print "Found extra files:"
      for file in extraFiles:
        print "  " + file
  else:
    finalRet = 0

  return finalRet


if __name__ == "__main__":
  try:
    ret = main(sys.argv)
    sys.exit(ret)
  finally:
    cleanup()


